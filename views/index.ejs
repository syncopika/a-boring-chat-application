<!doctype html>

<html>

	<head>
		<meta charset='utf-8'>
		<title> cool chat app </title>
		<script type="text/javascript" src="/socket.io/socket.io.js"></script>
		<script type="text/javascript" src="https://code.jquery.com/jquery-1.11.1.js"></script>
		<style>
			html, body{
				height: 100%;
				width: 100%;
			}
			body {
				font: 13px Helvetica, Arial;
			}
			#optionsBar{
				float: left;
				display: inline-block;
				height: 94%;
				width: 20%;
				border: 1px solid #000;
				margin-right: 2%;
				padding-left: 10px;
				padding-right: 8px;
			}
			#chatbox{
				float: left;
				height: 94%;
				width: 60%;
				border: 1px solid #000;
			}
			
			#display{
				position: relative;
				left: 0;
				top: 0;
				height: 95%;
				max-height: 95%;
				overflow: auto;
			}
			li{
				font-size: 18px;
			}
			form {
				position: relative;
				background: #fff;
				bottom: 0;
				top: 95%;
			}
			form input {
				border: 1px solid #000;
				padding: 10px;
				width: 90%;
				margin-right: .2%;
			}
			form button {
				width: 7%;
				background: rgb(130, 224, 255);
				padding: 10px;
			}
			#optionsBar button{
				padding: 3px;
				border: 1px solid #000;
				border-radius: 6px;
			}
			#messages {
				list-style-type: none;
				margin: 0;
				padding: 0;
			}
			#messages li{
				padding: 5px 10px;
				margin: 0;
			}
			#messages li:nth-child(odd){
				background: #eee;
			}
			
			#picReactionChoices, #asciiReactionChoices{
				display: none; /* only show when an option is selected */
				border: 1px solid #000;
				height: 10%; /* change this later */
			}
			
			#addNewEmoticon li{
				list-style-type: none;
			}
			
			#addNewEmoticon ul{
				padding-left: 0;
			}
			
			.asciiface:hover{
				background-color: rgba(0, 178, 0, .2);
			}
			.removeAscii{
				display: inline-block;
			}
			/*
			.removeAscii:hover{
				background-color: rgba(178, 0, 0, .8);
			}*/
		</style>
	</head>
	
	<body>
	
		<h2> fun talk </h2>
	
		<div id='optionsBar'>
		
			<div id='people'>
				<h3> currently online: </h2>
				<ol id='userList'>
					<!-- list the users -->
					<li> <%= user.local.username %> </li>
				</ol>
			</div>
			
			<hr>
			
			<div id='reactionPics'>
				<h2> reaction pictures </h2>
				
				<!-- select a reaction picture here -->
				<select id='selectReactPic' onchange="showChoices(this)">
					<!-- value has p for pic
						<option value="p0"></option>
						<option value="p1"> happy </option>
						<option value="p2"> sad </option>
						<option value="p3"> angry </option>
						<option value="p4"> funny </option>
					-->
				</select>
				
				<!-- choices show up here after selecting option --> 
				<div id='picReactionChoices'>
					<h1> stuff goes here... <h2>
				</div>
				
				<!-- add a new reaction pic -->
				<div id='addNewReactPic'>
					<h3> add new reaction pic! </h3>
					<input id="fileInput" style="display:none;" type="file">
					<button onclick=''> import </button>
					<label> category: <input id='picCategory' type='text' /> </label>
				</div>
			</div>
			
			<hr>
			
			<div id='reactionASCII'>
				<h2> reaction ascii emoticons </h2>
				
				<!-- select a reaction ascii emoticon thing here -->
				<select id='selectReactAscii' onchange="showChoices(this)">
					
					<!-- value has a for ascii -->
					<option value="a0"></option>
					<% for(var category in user.local.ascii_emoticons) { %>
						<option value="<%= category %>"> <%= category %></option> 
					<% } %>
					
				</select>
				
				<!-- choices show up here after selecting option --> 
				<div id='asciiReactionChoices'>
					
					<!-- for each emoticon category, list the options. keep them hidden until selected with the dropdown -->
					<% for(var category in user.local.ascii_emoticons) { %>		
						<ul id='<%= category %>' class='ascii_face' style="display: none">
						
							<% for(var i = 0; i < user.local.ascii_emoticons[category].length; i++){ %>		
								<li id='<%= category + i %>' onclick='addReactionToChat(this)'> <%=  user.local.ascii_emoticons[category][i]  %> <span class='removeAscii' onclick='removeEmoticon(this)'> remove </span> </li>					
							<% } %>
						
						</ul>		
					<% } %>
					
				</div>
				<h3> add a new reaction ascii </h3>

				<div id='addNewEmoticon'>
					<ul>
						<label> emotion: </label>
						<li><input type='text' id='newOption'></input></li>
						<label> ascii: </label>
						<li><input type='text' id='newEmoticon'></input></li>
						<br>
						<button onclick='addNewEmoticon()'> add </button>
					</ul>
				</div>
				
				<hr>
				
				<!-- send a pic -->
				<div id='sendPic'>
					<h3> send picture </h3>
					<input id="fileInput" style="display:none;" type="file">
					<button onclick='fileHandler()'> select picture </button>
				</div>
		
			</div>
		</div>
	
	
		<div id='chatbox'>
			<div id='display'>
				<ul id="messages"></ul>
			</div>
			
			<div id='sendMsg'>
				<form action="">
				<input id="m" autocomplete="off" />
					<button> Send </button>
				</form>
			</div>
		</div>
		
		<script>
		
			// this will be different for each user - this info should be stored in a database
			// note that strings with certain characters need to be escaped!! i.e. "\" -> this kind of slash, to print correctly, needs to be "\\"
			var defaultAscii; 
			var socket = io();

			$(function(){
			
				$('form').submit(function(){
					// send the message to the server, which will then send this message to all clients
					socket.emit('chat message', $('#m').val());
					$('#m').val('');
					return false;
				});
				socket.on('chat message', function(msg){
					// this is the client part. when you receive a message from the server, display it.
					$('#messages').append($('<li>').text(msg));
				});
				socket.on('image', function(imgData){
					// this is where client handles imgData sent from the server 
					var img = new Image();
					img.src = imgData;
					
					var canvas = document.createElement('canvas');
					canvas.setAttribute("width", "200px");
					canvas.setAttribute("height", "200px");
					
					img.onload = function(){
						var ctx = canvas.getContext('2d');
						ctx.drawImage(img, 0, 0, 200, 200);
					}
					
					var newListElement = document.createElement('li');
					var timestamp = new Date().toLocaleString();
					
					newListElement.appendChild(canvas);
					var date = document.createElement('span');
					date.textContent = timestamp;
					
					newListElement.appendChild(date);
					$('#messages').append(newListElement);
				});
			});
			
			/****
			
				show the emoticon choices for selected option 
			
			****/
			var currentlySelected = undefined;
			function showChoices(option){
			
				var choicesDisplay = document.getElementById('asciiReactionChoices');
				
				if(currentlySelected && currentlySelected.id !== option.value){
					choicesDisplay.style.display = "none";
					currentlySelected.style.display = "none";
				}
				
				// check if blank option selected. don't show anything 
				if(option.value === "p0"){
					document.getElementById('picReactionChoices').style.display = "none";
					return;
				}else if(option.value === "a0"){
					document.getElementById('asciiReactionChoices').style.display = "none";
					return;
				}
			
				var selectedOption = document.getElementById(option.value); // the ascii face category the user selects
				//console.log(selectedOption);
				
				selectedOption.style.display = "block";
				choicesDisplay.style.display = "block";
				currentlySelected = selectedOption;
			}
			
			/****
			
				add reaction to message input 
				
			*****/
			function addReactionToChat(element){
				var reaction = $('#' + element.id).contents().filter(function(){
					return this.nodeType === 3;
				}).text();
				$('#m').val( $('#m').val() + " " + reaction );
			}
			
			/****
			
				add a new custom emoticon to the dropdown box
				help! - https://stackoverflow.com/questions/41599523/update-a-field-only-if-it-exists-in-mongodb
			
			*****/
			function addNewEmoticon(){
				var option = document.getElementById('newOption').value.trim();
				var emoticon = document.getElementById('newEmoticon').value.trim();
				var select = document.getElementById('selectReactAscii');
				
				// see what emoticons are currently available and see if it's already present 
				var categories = document.querySelectorAll('ul.ascii_face');
				var selectedCategory = undefined;
				for(var i = 0; i < categories.length; i++){
					if(categories[i].id === option){
						selectedCategory = categories[i];
					}
				}
				
				// if the user is trying to put in an ascii face that will go into an already-present category, 
				// check to see that face doesn't exist yet 
				if(selectedCategory){
					// look through the child elements of the selected category. these will be <li> elements 
					for(var i = 0; i < selectedCategory.children.length; i++){
						if(selectedCategory.children[i].textContent.indexOf(emoticon) >= 0){
							// if a match for an emoticon is found, don't do anything.
							console.log("already exists...");
							return;
						}
					}
				}
				
				$.ajax({
					type: 'POST',
					url: '/post_ascii/?' + 'category=' + option + '&' + 'face=' + emoticon,
					success: function(response){				
						//console.log(response);
						/***
							on client side, add the new emoticon manually by creating the element and appending
						***/
						
						var newEmoticon = document.createElement('li');
						newEmoticon.textContent = emoticon;
						
						newEmoticon.addEventListener('click', function(){
							addReactionToChat(this);
						}, false);
						
						var removeOption = document.createElement('span');
						removeOption.textContent = "remove";
						removeOption.classList.add("removeAscii");
						
						removeOption.addEventListener('click', function(){
							removeAscii(this);
						}, false);
						
						newEmoticon.appendChild(removeOption);
					
						// if the category already exists, just append a new li element 
						if(selectedCategory){
							// if category already exists, just append to it 
							selectedCategory.appendChild(newEmoticon);
						}else{
							// otherwise, make the new category element 
							var newCategory = document.createElement('ul');
							newCategory.id = option;
							newCategory.classList.add('ascii_face');
							newCategory.style.display = "none";
							newCategory.appendChild(newEmoticon);
							
							// append new category to asciiReactionChoices
							document.getElementById('asciiReactionChoices').appendChild(newCategory);
							
							// add the new category as a new option in the dropdown box 
							var newOption = document.createElement('option');
							newOption.value = option;
							newOption.textContent = option;
							document.getElementById('selectReactAscii').appendChild(newOption);
						}
					}
				});
				
			}
			
			/*****
			
				remove an emoticon
				
			******/
			function removeEmoticon(element){
			
				// get parent node of the 'remove' span element that was clicked on 
				var emoticonNode = element.parentNode;
				
				// get the text of the parent node (should be an emoticon)
				var emoticonToRemove = $('#' + emoticonNode.id).contents().filter(
					function(){ return this.nodeType === 3}
				).text();
				
				// find out what option is currently selected in the dropdown 
				var select = document.getElementById('selectReactAscii');
				var option = select.options[select.selectedIndex].textContent.trim();
				
				// then make call to server to delete from database 
				$.ajax({
						type: 'DELETE',
						 // append the selected ascii face, and its category, as query parameters to the url.
						 // the two queries are: category and face 
						url: '/delete_asciiface/?' + 'category=' + option + '&' + 'face=' + emoticonToRemove,
						success: function(response){				
							
							/***
								now delete the emoticon client-side manually 
								how about deleting the option if the last emoticon in that category is deleted?
							***/
							var categoryOptions = emoticonNode.parentNode; // this should get the ul element of the emoticon category 
							categoryOptions.removeChild(emoticonNode);
							
							console.log(response);
						}
				});
			
			/*
				// remove from array first!
				var emoticonToRemove = element.parentNode.textContent;
				// find out the current selected option
				var select = document.getElementById('selectReactAscii');
				var option = select.options[select.selectedIndex].textContent.trim();
				
				// find the right emoticon to remove in the array it's in
				//var arr = defaultAscii[option];
			
				// adjust emoticonToRemove to remove the 'remove' string from the span element
				var emoticonToRemove = emoticonToRemove.substring(0, emoticonToRemove.indexOf('remove'));
			
				// make call to server to delete from database 
				$.ajax({
						type: 'DELETE',
						 // append the selected ascii face, and its category, as query parameters to the url.
						 // the two queries are: category and face 
						url: '/delete_asciiface/?' + 'category=' + option + '&' + 'face=' + emoticonToRemove,
						success: function(response){				
							// get back updated ascii face array and reasign to userAscii
							defaultAscii = response;
							
							// re-show selected emotion option contents after update 
							showChoices(select.options[select.selectedIndex]);			
							
							// indicate successful delete 
							//console.log(response);
						}
				});
				
			*/
				
			}
			
			/*
				import a picture 
			*/
			function fileHandler(){
				//initiate file choosing after button click
				var input = document.getElementById('fileInput');
				input.addEventListener('change', getFile, false);
				input.click();
			}

			function getFile(e){

				var reader = new FileReader();
				var file = e.target.files[0];
				var imgData;
				
				if (!file.type.match(/image.*/)){
					console.log("not a valid image");
					return;
				}
				
				//after reader has loaded file, put the data in the image object.
				reader.onloadend = function(){
					
					// get the base64 data of the image and assign it to imgData variable 
					imgData = reader.result;
					
					// send that variable to the server so it can send it to all clients
					socket.emit('image', imgData);
				
				}

				//read teh file as a URL
				reader.readAsDataURL(file);
			};

			
		</script>
		
	</body>

</html>